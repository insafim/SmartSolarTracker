    PROCESSOR   16F877A
    #include    <P16F877A.INC> ;NAME AND INCLUDE THE PROCESSOR
    
    org		0X00	      ;SET THE ORIGIN VECTOR
    EAST	EQU 0X20
    WEST	EQU 0X21
    COUNT	EQU 0X23	      
    COUNT1	EQU 0X24	  
    COUNT2	EQU 0X25
    OUTPUTE	EQU 0X26
    OUTPUTW	EQU 0X27
    
    GOTO	MAIN          ;START THE PROGRAM
    
 
    
MAIN
    ;******CONFIGURE I/O*******
    BCF		STATUS,6    ;SELECT BANK 1(01)
    BSF		STATUS,5  
    
    CLRF	TRISD	    ;PORTD CONFIGURED AS OUTPUT
    CLRF	TRISC	    ;PORTC CONFIGURED AS OUTPUT
  
    BSF		TRISA,0	    ;PORTA CONFIGURED AS INPUT
    
    BCF		ADCON1,7    ;LEFT JUSTIFIED
    
    BCF		ADCON1,3    ;ANALOG WITH AN3/RA3=Vref+(0001)
    BCF		ADCON1,2
    BCF		ADCON1,1
    BSF		ADCON1,0
    
    BCF		STATUS,5    ;SELECT BANK 0(00)
    CLRF	PORTB	    ;PORT B IS CLEARED
    
    BSF		ADCON0,7    ;SELECT CLOCK (Fosc/32)
    BCF		ADCON0,6 
    
    
    MOVLW	B'00000000'
    MOVWF	OUTPUTE
    MOVWF	OUTPUTW
    
START
    
    

   
    
    
    
ADC
    ;********EAST(AN0)********
    BCF		ADCON0,5    ;SELECT CHANNEL 0(000)
    BCF		ADCON0,4
    BCF		ADCON0,3

    BSF		ADCON0,0    ;TURN ON ADC
    CALL	DELAY1
    BSF		ADCON0,2    ;START CONVERSION
    
    LOOP1
    BTFSC	ADCON0,2    ;WAIT UNTIL THE CONVERSION IS COMPLETE
    GOTO	LOOP1
    
    MOVF	ADRESH,0    ;MOVE THE VALUE IN ADRESH TO W REGISTER
    MOVWF	EAST	    ;MOVE THE VALUE IN W REGISTER TO EAST
    ;MOVWF	PORTC
    CALL	DELAY2
    
    ;********WEST(AN1)********
    BCF		ADCON0,5    ;SELECT CHANNEL 1(001)
    BCF		ADCON0,4
    BSF		ADCON0,3

    BSF		ADCON0,0    ;TURN ON ADC
    CALL	DELAY1
    BSF		ADCON0,2    ;START CONVERSION
    
    LOOP2
    BTFSC	ADCON0,2    ;WAIT UNTIL THE CONVERSION IS COMPLETE
    GOTO	LOOP2
    
    MOVF	ADRESH,0    ;MOVE THE VALUE IN ADRESH TO W REGISTER
    MOVWF	WEST	    ;MOVE THE VALUE IN W REGISTER TO WEST
    ;MOVWF	PORTC
    CALL	DELAY2
RETURN
    
    

    
    
     
    ;********SUBROUTINE TO COMPARE EAST AND REF*********
COMPAREEAST
    MOVLW	B'11111111' ;REF VALUE '11111111'
    SUBWF	EAST,0	    ;(EAST - REF)
	
    BTFSS	STATUS,Z    ;IF EAST=REF => Z=1 . ELSEIF EAST><REF => Z=0
    GOTO	ELESSEQUAL    ;IF Z=1 SKIP THIS INSTRUCTION
    GOTO	EGREATER
    
    EGREATER
    MOVLW	B'00000001'
    MOVWF	OUTPUTE
    BCF		STATUS,C
    BCF		STATUS,Z
    GOTO	END_SUBE
    
    ELESSEQUAL
    MOVLW	B'00000000'
    MOVWF	OUTPUTE
    BCF		STATUS,C
    BCF		STATUS,Z
    GOTO	END_SUBE
    
    END_SUBE
RETURN
    

    ;********SUBROUTINE TO COMPARE WEST AND REF*********
COMPAREWEST
    MOVLW	B'11111111' ;REF VALUE '11111111'
    SUBWF	WEST,0	    ;(WEST - REF)
	
    BTFSS	STATUS,Z    ;IF WEST=REF => Z=1 . ELSEIF WEST><REF => Z=0
    GOTO	WLESSEQUAL    ;IF Z=1 SKIP THIS INSTRUCTION
    GOTO	WGREATER
    
    WGREATER
    MOVLW	B'00000011'
    MOVWF	OUTPUTW
    BCF		STATUS,C
    BCF		STATUS,Z
    GOTO	END_SUBW
    
    WLESSEQUAL
    MOVLW	B'00000000'
    MOVWF	OUTPUTW
    BCF		STATUS,C
    BCF		STATUS,Z
    GOTO	END_SUBW
    
    END_SUBW
RETURN
    
        
TURN1
    MOVLW	B'00000001'
    MOVWF	PORTD
RETURN

TURN2
    MOVLW	B'00000010'
    MOVWF	PORTD
RETURN
   
TURN3
    MOVLW	B'00000100'
    MOVWF	PORTD
RETURN

TURN4
    MOVLW	B'00001000'
    MOVWF	PORTD
RETURN

      
;********20us DELAY********
DELAY1   
    MOVLW	0X14
    MOVWF	COUNT
LOOP
    DECFSZ	COUNT,1
    GOTO	LOOP
RETURN
	
;********DELAY2 (0.5 SECONDS DELAY)********
DELAY2   
    MOVLW	B'11110110'
    MOVWF	COUNT1
    MOVLW	B'10100010'
    MOVWF	COUNT2
LOOP3 
    DECFSZ	COUNT1,1
    GOTO	LOOP3
    DECFSZ	COUNT2,1
    goto	LOOP3
RETURN 
    
;********DELAY3 (4 SECONDS DELAY)********
DELAY3
    CALL	DELAY2
    CALL	DELAY2
    CALL	DELAY2
    CALL	DELAY2
    CALL	DELAY2
    CALL	DELAY2
    CALL	DELAY2
    CALL	DELAY2
RETURN
     
    
    
END